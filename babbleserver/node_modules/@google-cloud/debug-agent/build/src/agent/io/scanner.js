"use strict";
/**
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto = require("crypto");
// TODO: Make this more precise.
var findit = require('findit2');
var fs = require("fs");
var _ = require("lodash");
var path = require("path");
// TODO: Make this more precise.
var split = require('split');
var ScanResultsImpl = /** @class */ (function () {
    /**
     * Encapsulates the results of a filesystem scan with methods
     * to easily select scan information or filenames for a
     * specific subset of the files listed in the scan results.
     *
     * @param stats An object that contains filenames
     *  as keys where each key maps to an object containing the
     *  hash and number of lines for the specified file.  This
     *  information is accessed via the `hash` and `lines`
     *  attributes respectively
     * @param hash A hashcode computed from the contents of all the files.
     */
    function ScanResultsImpl(stats, errorMap, hash) {
        this.stats = stats;
        this.errorMap = errorMap;
        this.hash = hash;
    }
    ScanResultsImpl.prototype.errors = function () {
        return this.errorMap;
    };
    /**
     * Used to get all of the file scan results.
     */
    ScanResultsImpl.prototype.all = function () {
        return this.stats;
    };
    /**
     * Used to get the file scan results for only the files
     * whose filenames match the specified regex.
     *
     * @param {regex} regex The regex that tests a filename
     *  to determine if the scan results for that filename
     *  should be included in the returned results.
     */
    ScanResultsImpl.prototype.selectStats = function (regex) {
        return _.pickBy(this.stats, function (ignore, key) {
            return regex.test(key);
        });
    };
    /**
     * Used to get the only the file paths in the scan results
     * where the filenames match the specified regex and are
     * returned with the each relative to the specified base
     * directory.
     *
     * @param {regex} regex The regex that tests a filename to
     *  determine if the scan results for that filename should
     *  be included in the returned results.
     * @param {string} baseDir The absolute path to the directory
     *  from which all of the returned paths should be relative
     *  to.
     */
    ScanResultsImpl.prototype.selectFiles = function (regex, baseDir) {
        // ensure the base directory has only a single trailing path separator
        baseDir = path.normalize(baseDir + path.sep);
        return Object.keys(this.stats)
            .filter(function (file) {
            return file && regex.test(file);
        })
            .map(function (file) {
            return path.normalize(file).replace(baseDir, '');
        });
    };
    return ScanResultsImpl;
}());
function scan(shouldHash, baseDir, regex) {
    return __awaiter(this, void 0, void 0, function () {
        var fileList;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, findFiles(baseDir, regex)];
                case 1:
                    fileList = _a.sent();
                    return [4 /*yield*/, computeStats(fileList, shouldHash)];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
exports.scan = scan;
/**
 * This function accept an array of filenames and computes a unique hash-code
 * based on the contents.
 *
 * @param {!Array<string>} fileList array of filenames
 * @param {Boolean} shouldHash whether a hash should be computed
 * @param {!function(?Error, ?string, Object)} callback error-back style callback
 *    returning the hash-code and an object containing file statistics.
 */
// TODO: Typescript: Fix the docs associated with this function to match the
// call signature
function computeStats(fileList, shouldHash) {
    var _this = this;
    return new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
        var hashes, statistics, errors, _i, fileList_1, filename, fileStats, err_1, hash, buffer, sha1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    // return a valid, if fake, result when there are no js files to hash.
                    if (fileList.length === 0) {
                        resolve(new ScanResultsImpl({}, new Map(), 'EMPTY-no-js-files'));
                        return [2 /*return*/];
                    }
                    hashes = [];
                    statistics = {};
                    errors = new Map();
                    _i = 0, fileList_1 = fileList;
                    _a.label = 1;
                case 1:
                    if (!(_i < fileList_1.length)) return [3 /*break*/, 6];
                    filename = fileList_1[_i];
                    _a.label = 2;
                case 2:
                    _a.trys.push([2, 4, , 5]);
                    return [4 /*yield*/, statsForFile(filename, shouldHash)];
                case 3:
                    fileStats = _a.sent();
                    if (shouldHash) {
                        hashes.push(fileStats.hash);
                    }
                    statistics[filename] = fileStats;
                    return [3 /*break*/, 5];
                case 4:
                    err_1 = _a.sent();
                    errors.set(filename, err_1);
                    return [3 /*break*/, 5];
                case 5:
                    _i++;
                    return [3 /*break*/, 1];
                case 6:
                    if (shouldHash) {
                        buffer = hashes.sort().join();
                        sha1 = crypto.createHash('sha1').update(buffer).digest('hex');
                        hash = 'SHA1-' + sha1;
                    }
                    resolve(new ScanResultsImpl(statistics, errors, hash));
                    return [2 /*return*/];
            }
        });
    }); });
}
/**
 * Given a base-directory, this function scans the subtree and finds all the js
 * files. .git and node_module subdirectories are ignored.
 * @param {!string} baseDir top-level directory to scan
 * @param {!regex} regex the regular expression that specifies the types of
 *  files to find based on their filename
 * @param {!function(?Error, Array<string>)} callback error-back callback
 */
function findFiles(baseDir, regex) {
    return new Promise(function (resolve, reject) {
        var error;
        if (!baseDir) {
            reject(new Error('hasher.findJSFiles requires a baseDir argument'));
            return;
        }
        var find = findit(baseDir);
        var fileList = [];
        find.on('error', function (err) {
            error = err;
            return;
        });
        find.on('directory', function (dir, ignore, stop) {
            var base = path.basename(dir);
            if (base === '.git' || base === 'node_modules') {
                stop(); // do not descend
            }
        });
        find.on('file', function (file) {
            if (regex.test(file)) {
                fileList.push(file);
            }
        });
        find.on('end', function () {
            // Note: the `end` event fires even after an error
            if (error) {
                reject(error);
            }
            else {
                resolve(fileList);
            }
        });
    });
}
/**
 * Compute a sha hash for the given file and record line counts along the way.
 * @param {string} filename
 * @param {Boolean} shouldHash whether a hash should be computed
 * @param {function} cb errorback style callback which returns the sha string
 * @private
 */
function statsForFile(filename, shouldHash) {
    return new Promise(function (resolve, reject) {
        var reader = fs.createReadStream(filename);
        reader.on('error', function (err) {
            reject(err);
        });
        reader.on('open', function () {
            var shasum;
            if (shouldHash) {
                shasum = crypto.createHash('sha1');
            }
            var lines = 0;
            var error;
            var byLine = reader.pipe(split());
            byLine.on('error', function (e) {
                error = e;
            });
            byLine.on('data', function (d) {
                if (shouldHash) {
                    shasum.update(d);
                }
                lines++;
            });
            byLine.on('end', function () {
                if (error) {
                    reject(error);
                }
                else {
                    var hash = shouldHash ? shasum.digest('hex') : undefined;
                    resolve({ hash: hash, lines: lines });
                }
            });
        });
    });
}
//# sourceMappingURL=scanner.js.map