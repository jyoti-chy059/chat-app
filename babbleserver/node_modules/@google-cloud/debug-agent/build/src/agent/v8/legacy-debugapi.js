"use strict";
/**
 * Copyright 2017 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var acorn = require("acorn");
var _ = require("lodash");
var path = require("path");
var semver = require("semver");
var vm = require("vm");
var status_message_1 = require("../../client/stackdriver/status-message");
var state = require("../state/legacy-state");
var utils = require("../util/utils");
var debugapi = require("./debugapi");
var V8BreakpointData = /** @class */ (function () {
    function V8BreakpointData(apiBreakpoint, v8Breakpoint, parsedCondition, 
    // TODO: The code in this method assumes that `compile` exists.  Verify
    // that is correct.
    // TODO: Update this so that `null|` is not needed for `compile`.
    compile) {
        this.apiBreakpoint = apiBreakpoint;
        this.v8Breakpoint = v8Breakpoint;
        this.parsedCondition = parsedCondition;
        this.compile = compile;
    }
    return V8BreakpointData;
}());
exports.V8BreakpointData = V8BreakpointData;
var V8DebugApi = /** @class */ (function () {
    function V8DebugApi(logger, config, jsFiles, sourcemapper) {
        var _this = this;
        this.breakpoints = {};
        this.listeners = {};
        this.numBreakpoints = 0;
        this.sourcemapper = sourcemapper;
        this.v8 = vm.runInDebugContext('Debug');
        this.config = config;
        this.fileStats = jsFiles;
        this.v8Version = /(\d+\.\d+\.\d+)\.\d+/.exec(process.versions.v8);
        this.logger = logger;
        this.usePermanentListener = semver.satisfies(this.v8Version[1], '>=4.5');
        this.handleDebugEvents =
            function (evt, execState, eventData) {
                try {
                    switch (evt) {
                        // TODO: Address the case where `v8` is `null`.
                        case _this.v8.DebugEvent.Break:
                            eventData.breakPointsHit().forEach(function (hit) {
                                var num = hit.script_break_point().number();
                                if (_this.listeners[num].enabled) {
                                    _this.logger.info('>>>V8 breakpoint hit<<< number: ' + num);
                                    _this.listeners[num].listener(execState, eventData);
                                }
                            });
                            break;
                        default:
                    }
                }
                catch (e) {
                    _this.logger.warn('Internal V8 error on breakpoint event: ' + e);
                }
            };
        if (this.usePermanentListener) {
            this.logger.info('activating v8 breakpoint listener (permanent)');
            this.v8.setListener(this.handleDebugEvents);
        }
    }
    V8DebugApi.prototype.set = function (breakpoint, cb) {
        if (!this.v8 || !breakpoint ||
            typeof breakpoint.id === 'undefined' || // 0 is a valid id
            !breakpoint.location || !breakpoint.location.path ||
            !breakpoint.location.line) {
            return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.UNSPECIFIED, utils.messages.INVALID_BREAKPOINT);
        }
        var baseScriptPath = path.normalize(breakpoint.location.path);
        if (!this.sourcemapper.hasMappingInfo(baseScriptPath)) {
            if (!_.endsWith(baseScriptPath, '.js')) {
                return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_SOURCE_LOCATION, utils.messages.COULD_NOT_FIND_OUTPUT_FILE);
            }
            this.setInternal(breakpoint, null /* mapInfo */, null /* compile */, cb);
        }
        else {
            var line = breakpoint.location.line;
            var column = 0;
            var mapInfo = this.sourcemapper.mappingInfo(baseScriptPath, line, column);
            var compile = utils.getBreakpointCompiler(breakpoint);
            if (breakpoint.condition && compile) {
                try {
                    breakpoint.condition = compile(breakpoint.condition);
                }
                catch (e) {
                    this.logger.info('Unable to compile condition >> ' + breakpoint.condition + ' <<');
                    return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_CONDITION, utils.messages.ERROR_COMPILING_CONDITION);
                }
            }
            this.setInternal(breakpoint, mapInfo, compile, cb);
        }
    };
    V8DebugApi.prototype.clear = function (breakpoint, cb) {
        if (typeof breakpoint.id === 'undefined') {
            return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_CONDITION, utils.messages.V8_BREAKPOINT_CLEAR_ERROR);
        }
        var breakpointData = this.breakpoints[breakpoint.id];
        if (!breakpointData) {
            return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_CONDITION, utils.messages.V8_BREAKPOINT_CLEAR_ERROR);
        }
        var v8bp = breakpointData.v8Breakpoint;
        this.v8.clearBreakPoint(v8bp.number());
        delete this.breakpoints[breakpoint.id];
        delete this.listeners[v8bp.number()];
        this.numBreakpoints--;
        if (this.numBreakpoints === 0 && !this.usePermanentListener) {
            // removed last breakpoint
            this.logger.info('deactivating v8 breakpoint listener');
            this.v8.setListener(null);
        }
        return setImmediate(function () {
            cb(null);
        });
    };
    V8DebugApi.prototype.wait = function (breakpoint, callback) {
        var that = this;
        var num = that.breakpoints[breakpoint.id].v8Breakpoint.number();
        var listener = this.onBreakpointHit.bind(this, breakpoint, function (err) {
            that.listeners[num].enabled = false;
            // This method is called from the debug event listener, which
            // swallows all exception. We defer the callback to make sure the
            // user errors aren't silenced.
            setImmediate(function () {
                callback(err);
            });
        });
        that.listeners[num] = { enabled: true, listener: listener };
    };
    V8DebugApi.prototype.log = function (breakpoint, print, shouldStop) {
        var that = this;
        var num = that.breakpoints[breakpoint.id].v8Breakpoint.number();
        var logsThisSecond = 0;
        var timesliceEnd = Date.now() + 1000;
        // TODO: Determine why the Error argument is not used.
        var listener = this.onBreakpointHit.bind(this, breakpoint, function (err) {
            var currTime = Date.now();
            if (currTime > timesliceEnd) {
                logsThisSecond = 0;
                timesliceEnd = currTime + 1000;
            }
            print(
            // TODO: Address the case where `breakpoint.logMessageFormat` is
            // null
            breakpoint.logMessageFormat, breakpoint.evaluatedExpressions.map(function (obj) { return JSON.stringify(obj); }));
            logsThisSecond++;
            if (shouldStop()) {
                that.listeners[num].enabled = false;
            }
            else {
                if (logsThisSecond >= that.config.log.maxLogsPerSecond) {
                    that.listeners[num].enabled = false;
                    setTimeout(function () {
                        // listeners[num] may have been deleted by `clear` during the
                        // async hop. Make sure it is valid before setting a property
                        // on it.
                        if (!shouldStop() && that.listeners[num]) {
                            that.listeners[num].enabled = true;
                        }
                    }, that.config.log.logDelaySeconds * 1000);
                }
            }
        });
        that.listeners[num] = { enabled: true, listener: listener };
    };
    V8DebugApi.prototype.disconnect = function () {
        return;
    };
    V8DebugApi.prototype.numBreakpoints_ = function () {
        return Object.keys(this.breakpoints).length;
    };
    V8DebugApi.prototype.numListeners_ = function () {
        return Object.keys(this.listeners).length;
    };
    V8DebugApi.prototype.setInternal = function (breakpoint, mapInfo, compile, cb) {
        // Parse and validate conditions and watch expressions for correctness and
        // immutability
        var ast = null;
        if (breakpoint.condition) {
            try {
                // We parse as ES6; even though the underlying V8 version may only
                // support a subset. This should be fine as the objective of the parse
                // is to heuristically find side-effects. V8 will raise errors later
                // if the syntax is invalid. It would have been nice if V8 had made the
                // parser API available us :(.
                ast = acorn.parse(breakpoint.condition, { sourceType: 'script', ecmaVersion: 6 });
                var validator = require('../util/validator.js');
                if (!validator.isValid(ast)) {
                    return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_CONDITION, utils.messages.DISALLOWED_EXPRESSION);
                }
            }
            catch (err) {
                return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_CONDITION, utils.messages.SYNTAX_ERROR_IN_CONDITION + err.message);
            }
        }
        // Presently it is not possible to precisely disambiguate the script
        // path from the path provided by the debug server. The issue is that we
        // don't know the repository root relative to the root filesystem or
        // relative to the working-directory of the process. We want to make sure
        // that we are setting the breakpoint that the user intended instead of a
        // breakpoint in a file that happens to have the same name but is in a
        // different directory. Until this is addressed between the server and the
        // debuglet, we are going to assume that repository root === the starting
        // working directory.
        var matchingScript;
        var scripts = utils.findScripts(mapInfo ? mapInfo.file :
            path.normalize(breakpoint.location.path), this.config, this.fileStats);
        if (scripts.length === 0) {
            return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_SOURCE_LOCATION, utils.messages.SOURCE_FILE_NOT_FOUND);
        }
        else if (scripts.length === 1) {
            // Found the script
            matchingScript = scripts[0];
        }
        else {
            return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_SOURCE_LOCATION, utils.messages.SOURCE_FILE_AMBIGUOUS);
        }
        // TODO: Address the case where `fileStats[matchingScript]` is `null`.
        if (breakpoint.location.line >=
            this.fileStats[matchingScript].lines) {
            return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_SOURCE_LOCATION, utils.messages.INVALID_LINE_NUMBER + matchingScript + ':' +
                breakpoint.location.line +
                '. Loaded script contained ' +
                this.fileStats[matchingScript].lines +
                ' lines. Please ensure' +
                ' that the snapshot was set in the same code version as the' +
                ' deployed source.');
        }
        // The breakpoint protobuf message presently doesn't have a column property
        // but it may have one in the future.
        // TODO: Address the case where `breakpoint.location` is `null`.
        var column = mapInfo && mapInfo.column ?
            mapInfo.column :
            (breakpoint.location.column || 1);
        var line = mapInfo ?
            mapInfo.line :
            breakpoint.location.line;
        // We need to special case breakpoints on the first line. Since Node.js
        // wraps modules with a function expression, we adjust
        // to deal with that.
        if (line === 1) {
            column += debugapi.MODULE_WRAP_PREFIX_LENGTH - 1;
        }
        var v8bp = this.setByRegExp(matchingScript, line, column);
        if (!v8bp) {
            return utils.setErrorStatusAndCallback(cb, breakpoint, status_message_1.StatusMessage.BREAKPOINT_SOURCE_LOCATION, utils.messages.V8_BREAKPOINT_ERROR);
        }
        if (this.numBreakpoints === 0 && !this.usePermanentListener) {
            // added first breakpoint
            this.logger.info('activating v8 breakpoint listener');
            this.v8.setListener(this.handleDebugEvents);
        }
        this.breakpoints[breakpoint.id] =
            // TODO: Address the case where `ast` is `null`.
            new V8BreakpointData(breakpoint, v8bp, ast, compile);
        this.numBreakpoints++;
        setImmediate(function () {
            cb(null);
        }); // success.
    };
    V8DebugApi.prototype.setByRegExp = function (scriptPath, line, column) {
        var regexp = utils.pathToRegExp(scriptPath);
        var num = this.v8.setScriptBreakPointByRegExp(regexp, line - 1, column - 1);
        var v8bp = this.v8.findBreakPoint(num);
        return v8bp;
    };
    V8DebugApi.prototype.onBreakpointHit = function (breakpoint, callback, execState) {
        // TODO: Address the situation where `breakpoint.id` is `null`.
        var v8bp = this.breakpoints[breakpoint.id].v8Breakpoint;
        if (!v8bp.active()) {
            // Breakpoint exists, but not active. We never disable breakpoints, so
            // this is theoretically not possible. Perhaps this is possible if there
            // is a second debugger present? Regardless, report the error.
            return utils.setErrorStatusAndCallback(callback, breakpoint, status_message_1.StatusMessage.BREAKPOINT_SOURCE_LOCATION, utils.messages.V8_BREAKPOINT_DISABLED);
        }
        var result = this.checkCondition(breakpoint, execState);
        if (result.error) {
            return utils.setErrorStatusAndCallback(callback, breakpoint, status_message_1.StatusMessage.BREAKPOINT_CONDITION, utils.messages.ERROR_EVALUATING_CONDITION + result.error);
        }
        else if (!result.value) {
            // Check again next time
            this.logger.info('\tthe breakpoint condition wasn\'t met');
            return;
        }
        // Breakpoint Hit
        var start = process.hrtime();
        try {
            this.captureBreakpointData(breakpoint, execState);
        }
        catch (err) {
            return utils.setErrorStatusAndCallback(callback, breakpoint, status_message_1.StatusMessage.BREAKPOINT_SOURCE_LOCATION, utils.messages.CAPTURE_BREAKPOINT_DATA + err);
        }
        var end = process.hrtime(start);
        this.logger.info(utils.formatInterval('capture time: ', end));
        callback(null);
    };
    /**
     * Evaluates the breakpoint condition, if present.
     * @return object with either a boolean value or an error property
     */
    V8DebugApi.prototype.checkCondition = function (breakpoint, execState) {
        if (!breakpoint.condition) {
            return { value: true };
        }
        var result = state.evaluate(breakpoint.condition, execState.frame(0));
        if (result.error) {
            return { error: result.error };
        }
        // TODO: Address the case where `result.mirror` is `null`.
        return {
            value: !!(result.mirror.value())
        }; // intentional !!
    };
    V8DebugApi.prototype.captureBreakpointData = function (breakpoint, execState) {
        var expressionErrors = [];
        if (breakpoint.expressions && this.breakpoints[breakpoint.id].compile) {
            for (var i = 0; i < breakpoint.expressions.length; i++) {
                try {
                    breakpoint.expressions[i] =
                        // TODO: Address the case where `compile` is `null`.
                        this.breakpoints[breakpoint.id].compile(breakpoint.expressions[i]);
                }
                catch (e) {
                    this.logger.info('Unable to compile watch expression >> ' +
                        breakpoint.expressions[i] + ' <<');
                    expressionErrors.push({
                        name: breakpoint.expressions[i],
                        status: new status_message_1.StatusMessage(status_message_1.StatusMessage.VARIABLE_VALUE, 'Error Compiling Expression', true)
                    });
                    breakpoint.expressions.splice(i, 1);
                    i--;
                }
            }
        }
        if (breakpoint.action === 'LOG') {
            // TODO: This doesn't work with compiled languages if there is an error
            // compiling one of the expressions in the loop above.
            if (!breakpoint.expressions) {
                breakpoint.evaluatedExpressions = [];
            }
            else {
                var frame_1 = execState.frame(0);
                var evaluatedExpressions = breakpoint.expressions.map(function (exp) {
                    var result = state.evaluate(exp, frame_1);
                    // TODO: Address the case where `result.mirror` is `undefined`.
                    return result.error ? result.error :
                        result.mirror.value();
                });
                breakpoint.evaluatedExpressions = evaluatedExpressions;
            }
        }
        else {
            // TODO: Address the case where `breakpoint.expression` is `undefined`.
            var captured = state.capture(execState, breakpoint.expressions, this.config, this.v8);
            if (breakpoint.location &&
                utils.isJavaScriptFile(breakpoint.location.path) &&
                captured.location && captured.location.line) {
                breakpoint.location.line = captured.location.line;
            }
            breakpoint.stackFrames = captured.stackFrames;
            // TODO: This suggests the Status type and Variable type are the same.
            //       Determine if that is the case.
            breakpoint.variableTable =
                captured.variableTable;
            breakpoint.evaluatedExpressions =
                expressionErrors.concat(captured.evaluatedExpressions);
        }
    };
    return V8DebugApi;
}());
exports.V8DebugApi = V8DebugApi;
//# sourceMappingURL=legacy-debugapi.js.map